{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Category } from 'src/app/models/category';\nimport { SweatAlert } from 'src/app/services/sweat-alert.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/category.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction CreateCategoryComponent_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 18);\n    i0.ɵɵtext(1, \" CREATE CATEGORY \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateCategoryComponent_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 18);\n    i0.ɵɵtext(1, \" UPDATE CATEGORY \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateCategoryComponent_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 13);\n    i0.ɵɵtext(1, \"Enter a valid Name!\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class CreateCategoryComponent {\n  constructor(categoryService, route, router) {\n    this.categoryService = categoryService;\n    this.route = route;\n    this.router = router;\n    this.category = new Category(0, '', '', 0);\n    this.isUpdateMode = false;\n    this.sweatAlertService = new SweatAlert();\n    this.isChangesSaved = false;\n    this.router.params.subscribe(params => {\n      //CHECK IF THE ID HAS RIGHT ID\n      if (!isNaN(params['id'])) {\n        this.isUpdateMode = true;\n        this.category.id = params['id'];\n        this.categoryService.GetCategory(this.category.id).subscribe({\n          next: result => {\n            this.category = result.result;\n            console.log(result);\n          },\n          error: error => {\n            this.route.navigate(['/notfound'], {\n              relativeTo: this.router\n            });\n          }\n        });\n      }\n    });\n  }\n  ngOnInit() {\n    this.createCategory = new FormGroup({\n      name: new FormControl(null, [Validators.required]),\n      description: new FormControl(null)\n    });\n  }\n  onSubmit() {\n    //CREATE CASE\n    if (!this.isUpdateMode) {\n      this.categoryService.PostCategory(this.category).subscribe({\n        next: response => {\n          this.isChangesSaved = true;\n          this.sweatAlertService.successNotification();\n          this.route.navigate(['/categories'], {\n            relativeTo: this.router\n          });\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n    } else {\n      this.categoryService.PutCategory(this.category).subscribe({\n        next: response => {\n          this.isChangesSaved = true;\n          this.sweatAlertService.successNotification();\n          this.route.navigate(['/categories'], {\n            relativeTo: this.router\n          });\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n    }\n  }\n  backToCategories() {\n    this.route.navigate(['/categories'], {\n      relativeTo: this.router\n    });\n  }\n  canDeactivate() {\n    return new Promise(resolve => {\n      if (!this.createCategory.valid || !this.isChangesSaved) {\n        this.sweatAlertService.alertSkipEdit().then(isConfirmed => {\n          resolve(isConfirmed);\n        });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function CreateCategoryComponent_Factory(t) {\n    return new (t || CreateCategoryComponent)(i0.ɵɵdirectiveInject(i1.CategoryService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateCategoryComponent,\n    selectors: [[\"app-create-category\"]],\n    decls: 27,\n    vars: 7,\n    consts: [[\"enctype\", \"multipart/form-data\", \"novalidate\", \"\", 1, \"needs-validation\", \"mt-5\", \"mb-5\", 3, \"formGroup\", \"ngSubmit\"], [1, \"container\", \"bg-light\", \"col-md-9\", \"col-11\", \"p-3\", 2, \"border-radius\", \"10px\"], [\"class\", \"bg-light\", \"style\", \"font-size: 2rem; font-weight: bold; color: #104c74\", 4, \"ngIf\"], [1, \"row\"], [\"type\", \"hidden\", \"name\", \"search\", \"value\", \"@search\"], [\"type\", \"hidden\", \"name\", \"pageNumber\", \"value\", \"@pageNumber\"], [1, \"col-2\"], [1, \"form-label\", \"pt-2\", 2, \"font-size\", \"20px\"], [1, \"col-10\", \"pb-3\"], [\"formControlName\", \"name\", \"placeholder\", \"Enter category name..\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"control-label\", \"pt-2\", 2, \"font-size\", \"20px\"], [\"formControlName\", \"description\", \"rows\", \"5\", \"placeholder\", \"Enter description..\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"text-danger\"], [1, \"col-12\", \"d-flex\", \"justify-content-around\"], [1, \"col-5\"], [1, \"btn-primary\", \"btn\", \"form-control\", 3, \"click\"], [\"type\", \"submit\", \"id\", \"submit\", \"value\", \"Confirm\", 1, \"btn\", \"btn-success\", \"form-control\", 3, \"disabled\"], [1, \"bg-light\", 2, \"font-size\", \"2rem\", \"font-weight\", \"bold\", \"color\", \"#104c74\"]],\n    template: function CreateCategoryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateCategoryComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelement(1, \"br\");\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵtemplate(3, CreateCategoryComponent_p_3_Template, 2, 0, \"p\", 2);\n        i0.ɵɵtemplate(4, CreateCategoryComponent_p_4_Template, 2, 0, \"p\", 2);\n        i0.ɵɵelement(5, \"hr\");\n        i0.ɵɵelementStart(6, \"div\", 3);\n        i0.ɵɵelement(7, \"input\", 4)(8, \"input\", 5);\n        i0.ɵɵelementStart(9, \"div\", 6)(10, \"label\", 7);\n        i0.ɵɵtext(11, \"Name:\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 8)(13, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateCategoryComponent_Template_input_ngModelChange_13_listener($event) {\n          return ctx.category.name = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, CreateCategoryComponent_span_14_Template, 2, 0, \"span\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 6)(16, \"label\", 11);\n        i0.ɵɵtext(17, \"Description:\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 8)(19, \"textarea\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateCategoryComponent_Template_textarea_ngModelChange_19_listener($event) {\n          return ctx.category.description = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"span\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 14)(22, \"div\", 15)(23, \"a\", 16);\n        i0.ɵɵlistener(\"click\", function CreateCategoryComponent_Template_a_click_23_listener() {\n          return ctx.backToCategories();\n        });\n        i0.ɵɵtext(24, \"Back to Categories\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(25, \"div\", 15);\n        i0.ɵɵelement(26, \"input\", 17);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.createCategory);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isUpdateMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isUpdateMode);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngModel\", ctx.category.name);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.createCategory.get(\"name\").valid && ctx.createCategory.get(\"name\").touched);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.category.description);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"disabled\", !ctx.createCategory.valid);\n      }\n    },\n    dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","Category","SweatAlert","i0","CreateCategoryComponent","constructor","categoryService","route","router","params","subscribe","isNaN","isUpdateMode","category","id","GetCategory","next","result","console","log","error","navigate","relativeTo","ngOnInit","createCategory","name","required","description","onSubmit","PostCategory","response","isChangesSaved","sweatAlertService","successNotification","err","PutCategory","backToCategories","canDeactivate","Promise","resolve","valid","alertSkipEdit","then","isConfirmed","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["G:\\Courses\\Programming\\Ahmed Turky Demos\\Basic CRUDs Opearations (CQRS, Mediator, Repository, Unit of Work)\\Frontend\\Products App\\src\\app\\categories\\create-category\\create-category.component.ts","G:\\Courses\\Programming\\Ahmed Turky Demos\\Basic CRUDs Opearations (CQRS, Mediator, Repository, Unit of Work)\\Frontend\\Products App\\src\\app\\categories\\create-category\\create-category.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { SingleResult } from 'src/app/interfaces/singleResult.interface';\nimport { Category } from 'src/app/models/category';\nimport { CanComponentDeactivate } from 'src/app/services/can-deactivate-gaurd.service';\nimport { CategoryService } from 'src/app/services/category.service';\nimport { SweatAlert } from 'src/app/services/sweat-alert.service';\n\n@Component({\n  selector: 'app-create-category',\n  templateUrl: './create-category.component.html',\n  styleUrls: ['./create-category.component.css'],\n})\nexport class CreateCategoryComponent implements OnInit, CanComponentDeactivate {\n  createCategory: FormGroup;\n  category: Category = new Category(0, '', '', 0);\n  isUpdateMode: boolean = false;\n  sweatAlertService: SweatAlert = new SweatAlert();\n  isChangesSaved: boolean = false;\n\n  constructor(\n    private categoryService: CategoryService,\n    private route: Router,\n    private router: ActivatedRoute\n  ) {\n    this.router.params.subscribe((params: Params) => {\n      //CHECK IF THE ID HAS RIGHT ID\n      if (!isNaN(params['id'])) {\n        this.isUpdateMode = true;\n        this.category.id = params['id'];\n        this.categoryService.GetCategory(this.category.id).subscribe({\n          next: (result: SingleResult) => {\n            this.category = <Category>result.result;\n            console.log(result);\n          },\n          error: (error) => {\n            this.route.navigate(['/notfound'], { relativeTo: this.router });\n          },\n        });\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.createCategory = new FormGroup({\n      name: new FormControl(null, [Validators.required]),\n      description: new FormControl(null),\n    });\n  }\n\n  onSubmit() {\n    //CREATE CASE\n    if (!this.isUpdateMode) {\n      this.categoryService.PostCategory(this.category).subscribe({\n        next: (response) => {\n          this.isChangesSaved = true;\n          this.sweatAlertService.successNotification();\n          this.route.navigate(['/categories'], { relativeTo: this.router });\n        },\n        error: (err) => {\n          console.log(err);\n        },\n      });\n    } else {\n      this.categoryService.PutCategory(this.category).subscribe({\n        next: (response) => {\n          this.isChangesSaved = true;\n          this.sweatAlertService.successNotification();\n          this.route.navigate(['/categories'], { relativeTo: this.router });\n        },\n        error: (err) => {\n          console.log(err);\n        },\n      });\n    }\n  }\n\n  backToCategories() {\n    this.route.navigate(['/categories'], { relativeTo: this.router });\n  }\n\n  canDeactivate(): boolean | Promise<boolean> | Observable<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (!this.createCategory.valid || !this.isChangesSaved) {\n        this.sweatAlertService.alertSkipEdit().then((isConfirmed) => {\n          resolve(isConfirmed);\n        });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n}\n","<form\n  [formGroup]=\"createCategory\"\n  enctype=\"multipart/form-data\"\n  class=\"needs-validation mt-5 mb-5\"\n  novalidate\n  (ngSubmit)=\"onSubmit()\"\n>\n  <br />\n  <div\n    class=\"container bg-light col-md-9 col-11 p-3\"\n    style=\"border-radius: 10px\"\n  >\n    <p\n      class=\"bg-light\"\n      style=\"font-size: 2rem; font-weight: bold; color: #104c74\"\n      *ngIf=\"!isUpdateMode\"\n    >\n      CREATE CATEGORY\n    </p>\n    <p\n      class=\"bg-light\"\n      style=\"font-size: 2rem; font-weight: bold; color: #104c74\"\n      *ngIf=\"isUpdateMode\"\n    >\n      UPDATE CATEGORY\n    </p>\n    <hr />\n\n    <div class=\"row\">\n      <input type=\"hidden\" name=\"search\" value=\"@search\" />\n      <input type=\"hidden\" name=\"pageNumber\" value=\"@pageNumber\" />\n\n      <div class=\"col-2\">\n        <label class=\"form-label pt-2\" style=\"font-size: 20px\">Name:</label>\n      </div>\n      <div class=\"col-10 pb-3\">\n        <input\n          formControlName=\"name\"\n          class=\"form-control\"\n          [(ngModel)]=\"category.name\"\n          placeholder=\"Enter category name..\"\n        />\n        <span\n          *ngIf=\"\n            !createCategory.get('name').valid &&\n            createCategory.get('name').touched\n          \"\n          class=\"text-danger\"\n          >Enter a valid Name!</span\n        >\n      </div>\n\n      <div class=\"col-2\">\n        <label class=\"control-label pt-2\" style=\"font-size: 20px\"\n          >Description:</label\n        >\n      </div>\n      <div class=\"col-10 pb-3\">\n        <textarea\n          formControlName=\"description\"\n          class=\"form-control\"\n          rows=\"5\"\n          [(ngModel)]=\"category.description\"\n          placeholder=\"Enter description..\"\n        ></textarea>\n        <span class=\"text-danger\"></span>\n      </div>\n\n      <div class=\"col-12 d-flex justify-content-around\">\n        <div class=\"col-5\">\n          <a class=\"btn-primary btn form-control\" (click)=\"backToCategories()\"\n            >Back to Categories</a\n          >\n        </div>\n        <div class=\"col-5\">\n          <input\n            [disabled]=\"!createCategory.valid\"\n            type=\"submit\"\n            id=\"submit\"\n            value=\"Confirm\"\n            class=\"btn btn-success form-control\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}