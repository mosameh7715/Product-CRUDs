{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment.development';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ItemService {\n  constructor(http) {\n    this.http = http;\n    this.pageSize = 9;\n    this.singleItem = new Subject();\n    this.refresh = new Subject();\n    this.url = environment.apiDomain + '/api/Products';\n  }\n  getAllItems(pageNumber = 1, search = '') {\n    return this.http.get(this.url + `?pageSize=${this.pageSize}&pageNumber=${pageNumber}&search=${search}`);\n  }\n  GetItem(id) {\n    return this.http.get(`${this.url}/${id}`);\n  }\n  PostItem(item) {\n    return this.http.post(this.url, item);\n  }\n  PutItem(item) {\n    return this.http.put(`${this.url}/${item.id}`, item);\n  }\n  DeleteItem(id) {\n    return this.http.delete(`${this.url}/${id}`);\n  }\n  PostFormData(item) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n    // const formData = new URLSearchParams();\n    // for (const key in item) {\n    //   if (item.hasOwnProperty(key)) {\n    //     formData.set(key, item[key]);\n    //   }\n    // }\n    return this.http.post(`${this.url}`, item, {\n      headers\n    });\n  }\n  PutFormData(item) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n    const formData = new URLSearchParams();\n    for (const key in item) {\n      if (item.hasOwnProperty(key)) {\n        formData.set(key, item[key]);\n      }\n    }\n    return this.http.put(`${this.url}/${item.id}`, formData.toString(), {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function ItemService_Factory(t) {\n    return new (t || ItemService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ItemService,\n    factory: ItemService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,WAAW,QAAQ,0CAA0C;AAGtE,SAASC,OAAO,QAAQ,MAAM;;;AAM9B,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJxB,aAAQ,GAAW,CAAC;IACpB,eAAU,GAAG,IAAIH,OAAO,EAAW;IACnC,YAAO,GAAkB,IAAIA,OAAO,EAAQ;IACpC,QAAG,GAAWD,WAAW,CAACK,SAAS,GAAG,eAAe;EACtB;EAEvCC,WAAW,CAACC,aAAqB,CAAC,EAAEC,SAAiB,EAAE;IACrD,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAClB,IAAI,CAACC,GAAG,GACN,aAAa,IAAI,CAACC,QAAQ,eAAeJ,UAAU,WAAWC,MAAM,EAAE,CACzE;EACH;EACAI,OAAO,CAACC,EAAU;IAChB,OAAO,IAAI,CAACT,IAAI,CAACK,GAAG,CAAC,GAAG,IAAI,CAACC,GAAG,IAAIG,EAAE,EAAE,CAAC;EAC3C;EACAC,QAAQ,CAACC,IAAa;IACpB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,IAAI,CAACN,GAAG,EAAEK,IAAI,CAAC;EACvC;EACAE,OAAO,CAACF,IAAa;IACnB,OAAO,IAAI,CAACX,IAAI,CAACc,GAAG,CAAC,GAAG,IAAI,CAACR,GAAG,IAAIK,IAAI,CAACF,EAAE,EAAE,EAAEE,IAAI,CAAC;EACtD;EACAI,UAAU,CAACN,EAAU;IACnB,OAAO,IAAI,CAACT,IAAI,CAACgB,MAAM,CAAC,GAAG,IAAI,CAACV,GAAG,IAAIG,EAAE,EAAE,CAAC;EAC9C;EAEAQ,YAAY,CAACN,IAAc;IACzB,MAAMO,OAAO,GAAG,IAAIvB,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IAEA,OAAO,IAAI,CAACK,IAAI,CAACY,IAAI,CAAC,GAAG,IAAI,CAACN,GAAG,EAAE,EAAEK,IAAI,EAAE;MAAEO;IAAO,CAAE,CAAC;EACzD;EAEAC,WAAW,CAACR,IAAa;IACvB,MAAMO,OAAO,GAAG,IAAIvB,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IACF,MAAMyB,QAAQ,GAAG,IAAIC,eAAe,EAAE;IACtC,KAAK,MAAMC,GAAG,IAAIX,IAAI,EAAE;MACtB,IAAIA,IAAI,CAACY,cAAc,CAACD,GAAG,CAAC,EAAE;QAC5BF,QAAQ,CAACI,GAAG,CAACF,GAAG,EAAEX,IAAI,CAACW,GAAG,CAAC,CAAC;;;IAGhC,OAAO,IAAI,CAACtB,IAAI,CAACc,GAAG,CAAC,GAAG,IAAI,CAACR,GAAG,IAAIK,IAAI,CAACF,EAAE,EAAE,EAAEW,QAAQ,CAACK,QAAQ,EAAE,EAAE;MAClEP;KACD,CAAC;EACJ;EAAC;qBArDUpB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA4B,SAAX5B,WAAW;IAAA6B,YAFV;EAAM","names":["HttpHeaders","environment","Subject","ItemService","constructor","http","apiDomain","getAllItems","pageNumber","search","get","url","pageSize","GetItem","id","PostItem","item","post","PutItem","put","DeleteItem","delete","PostFormData","headers","PutFormData","formData","URLSearchParams","key","hasOwnProperty","set","toString","factory","providedIn"],"sourceRoot":"","sources":["G:\\Courses\\Programming\\Ahmed Turky Demos\\Basic CRUDs Opearations (CQRS, Mediator, Repository, Unit of Work)\\Frontend\\Products App\\src\\app\\services\\item.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment.development';\nimport { Product } from '../models/Product';\nimport { Result } from '../interfaces/result.interface';\nimport { Subject } from 'rxjs';\nimport { FormGroup } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemService {\n  pageSize: number = 9;\n  singleItem = new Subject<Product>();\n  refresh: Subject<void> = new Subject<void>();\n  private url: string = environment.apiDomain + '/api/Products';\n  constructor(private http: HttpClient) {}\n\n  getAllItems(pageNumber: number = 1, search: string = '') {\n    return this.http.get<Result>(\n      this.url +\n        `?pageSize=${this.pageSize}&pageNumber=${pageNumber}&search=${search}`\n    );\n  }\n  GetItem(id: number) {\n    return this.http.get(`${this.url}/${id}`);\n  }\n  PostItem(item: Product) {\n    return this.http.post(this.url, item);\n  }\n  PutItem(item: Product) {\n    return this.http.put(`${this.url}/${item.id}`, item);\n  }\n  DeleteItem(id: number) {\n    return this.http.delete(`${this.url}/${id}`);\n  }\n\n  PostFormData(item: FormData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    // const formData = new URLSearchParams();\n    // for (const key in item) {\n    //   if (item.hasOwnProperty(key)) {\n    //     formData.set(key, item[key]);\n    //   }\n    // }\n\n    return this.http.post(`${this.url}`, item, { headers });\n  }\n\n  PutFormData(item: Product) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    const formData = new URLSearchParams();\n    for (const key in item) {\n      if (item.hasOwnProperty(key)) {\n        formData.set(key, item[key]);\n      }\n    }\n    return this.http.put(`${this.url}/${item.id}`, formData.toString(), {\n      headers,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}