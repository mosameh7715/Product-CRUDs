{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./login.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthorizeService {\n  constructor(loginService, route, router) {\n    this.loginService = loginService;\n    this.route = route;\n    this.router = router;\n    this.isAdmin = false;\n  }\n  validateToken() {\n    if (localStorage.getItem('userToken')) {\n      this.loginService.getLoggedInUser().subscribe({\n        next: response => {\n          this.isAdmin = true;\n        },\n        error: error => {\n          console.log(error);\n          localStorage.clear();\n          this.route.navigate(['/login'], {\n            relativeTo: this.router\n          });\n          this.isAdmin = false;\n        }\n      });\n    }\n    return this.isAdmin;\n  }\n  static #_ = this.ɵfac = function AuthorizeService_Factory(t) {\n    return new (t || AuthorizeService)(i0.ɵɵinject(i1.LoginService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizeService,\n    factory: AuthorizeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,gBAAgB;EAG3BC,YACUC,YAA0B,EAC1BC,KAAa,EACbC,MAAsB;IAFtB,iBAAY,GAAZF,YAAY;IACZ,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;IALhB,YAAO,GAAY,KAAK;EAMrB;EAEHC,aAAa;IACX,IAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAE;MACrC,IAAI,CAACL,YAAY,CAACM,eAAe,EAAE,CAACC,SAAS,CAAC;QAC5CC,IAAI,EAAGC,QAAQ,IAAI;UACjB,IAAI,CAACC,OAAO,GAAG,IAAI;QACrB,CAAC;QACDC,KAAK,EAAGA,KAAK,IAAI;UACfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;UAClBP,YAAY,CAACU,KAAK,EAAE;UACpB,IAAI,CAACb,KAAK,CAACc,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;YAAEC,UAAU,EAAE,IAAI,CAACd;UAAM,CAAE,CAAC;UAC5D,IAAI,CAACQ,OAAO,GAAG,KAAK;QACtB;OACD,CAAC;;IAGJ,OAAO,IAAI,CAACA,OAAO;EACrB;EAAC;qBAzBUZ,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAAmB,SAAhBnB,gBAAgB;IAAAoB,YADH;EAAM","names":["AuthorizeService","constructor","loginService","route","router","validateToken","localStorage","getItem","getLoggedInUser","subscribe","next","response","isAdmin","error","console","log","clear","navigate","relativeTo","factory","providedIn"],"sourceRoot":"","sources":["G:\\Courses\\Programming\\Ahmed Turky Demos\\Basic CRUDs Opearations (CQRS, Mediator, Repository, Unit of Work)\\Frontend\\Products App\\src\\app\\services\\authorize.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport jwt_decode from 'jwt-decode';\nimport { LoginService } from './login.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthorizeService {\n  isAdmin: boolean = false;\n\n  constructor(\n    private loginService: LoginService,\n    private route: Router,\n    private router: ActivatedRoute\n  ) {}\n\n  validateToken() {\n    if (localStorage.getItem('userToken')) {\n      this.loginService.getLoggedInUser().subscribe({\n        next: (response) => {\n          this.isAdmin = true;\n        },\n        error: (error) => {\n          console.log(error);\n          localStorage.clear();\n          this.route.navigate(['/login'], { relativeTo: this.router });\n          this.isAdmin = false;\n        },\n      });\n    }\n\n    return this.isAdmin;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}